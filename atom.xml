<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GALAXY</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangchaofu.cn/"/>
  <updated>2018-05-18T15:26:59.065Z</updated>
  <id>https://yangchaofu.cn/</id>
  
  <author>
    <name>沼泽星空</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>越努力，越不迷茫</title>
    <link href="https://yangchaofu.cn/%E8%B6%8A%E5%8A%AA%E5%8A%9B%EF%BC%8C%E8%B6%8A%E4%B8%8D%E8%BF%B7%E8%8C%AB.html"/>
    <id>https://yangchaofu.cn/越努力，越不迷茫.html</id>
    <published>2018-05-18T14:37:08.000Z</published>
    <updated>2018-05-18T15:26:59.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>我慢慢明白了自己为什么不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻，吃饭游泳期待它让我一斤斤瘦下来，发一条短信期待它被回复，写一个故事说一个心情期待它被关注被安慰，参加一个活动期待换来充实丰富的经历。这些预设的期待如果实现了，长舒一口气。如果没有实现呢？自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花，小时候不期待结果，小时候苦笑都不打折。             —<em>《允许自己虚度时光》</em></p></blockquote><a id="more"></a><p>这久的主要任务是软考，下周就是软考的时间了，这次的准备比前一次要好很多，复习了好多的内容，但是心中还是没有底，没有稳过的把握。对于拖延的我来说，这段时间也算是有了极大的改变了，问题在于将习惯坚持下去。</p><p>回想以前的生活，可能是生活过的太过安逸了。现在总算明白了啥叫“生于忧患，死于安乐”。我以前就暗暗下过决心，要把软考和四级当作我的大学毕业考，我现在就在路上，所以感到无比的充实，把心中的想法吐出来是很舒畅的一件事情。</p><p>软考的内容很广，即使考过软考也并不能说明我就具有什么能力了，只是一个重新的开始，后面的路还很长，对于计算机的学生来说软考的难度不大，但是必须什么都知道一点，不然是可能通过的，初级的考试我不太了解，但是我觉得综合下来，中级是比较适合我的，而且考点也都是学习的内容，刚好可以和课堂互补，还有一周的时间，这周最主要的任务是突破大题，避免重蹈覆辙，不走前次的老路。说起来，前次的成绩给了我不错的激励，我知道自己不会过，但是能看到希望，但是这点滴的差距，往往是瓶颈，所以，认真准备才能通过。</p><p>四级的话这次也是有很大的投资，希望能看到回报，但是时间同样紧迫，感觉在词汇方面还有很大的不足，往往一个单词就能让一篇阅读难度成倍的增加，所以词汇不能懈怠，软考之后就全面转入四级的复习，不要让课程的东西影响了自己的，说句实话，大学真的是要自己找出路的，老师根本不管你的死活，他们有时甚至连自己的学习任务都完不成，所以，四级和软考，必须通过，加油。</p><hr><p>越努力，就越不迷茫，当不知道要干什么的时候，可以看看自己给自己列的书单，随便找一本，竭尽全力的全看，能看懂多少，看多少，成功最重要的一点，我觉得是控制自己的欲望。</p><p>写下这些话，给自己以激励，希望自己能努力前行，不忘初心。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我慢慢明白了自己为什么不快乐，因为我总是期待一个结果。看一本书期待它让我变得深刻，吃饭游泳期待它让我一斤斤瘦下来，发一条短信期待它被回复，写一个故事说一个心情期待它被关注被安慰，参加一个活动期待换来充实丰富的经历。这些预设的期待如果实现了，长舒一口气。如果没有实现呢？自怨自艾。可是小时候也是同一个我，用一个下午的时间看蚂蚁搬家，等石头开花，小时候不期待结果，小时候苦笑都不打折。             —&lt;em&gt;《允许自己虚度时光》&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://yangchaofu.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情" scheme="https://yangchaofu.cn/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="软考" scheme="https://yangchaofu.cn/tags/%E8%BD%AF%E8%80%83/"/>
    
      <category term="四级" scheme="https://yangchaofu.cn/tags/%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建博客|Hexo+Github+NexT</title>
    <link href="https://yangchaofu.cn/Hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://yangchaofu.cn/Hexo从零开始搭建博客.html</id>
    <published>2018-05-10T09:24:13.000Z</published>
    <updated>2018-05-11T09:14:28.955Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>个人博客是继Email、BBS、IM之后的第四种网络信息传播方式，是一个区别于当前流行的（QQ空间，微信朋友圈，微信公众号，微博，贴吧，知乎，简书，论坛）信息分享平台，他有强烈的个人标识和非常高的个性化。</p><a id="more"></a><p>博客诞生同其他几个一样，在互联网兴起之后，人们对信息分享和流通的需求逐渐加大，而这个需求在当时还不能由上述所说的各种产品满足，所以博客成为了当时的一种信息共享方式；在当时写博客的人应该多是互联网从事者，因为当时互联网使用率很低，也没有WordPress，Joomla，Hexo这样简单好用（相对而言）的建站工具，建站难度很高，个人建站的话，必须精通网络知识而且能够进行Web开发。即使博客能顺利建立，以后面临的另一个问题就是内容流通性差，互联网太广太大了，光靠搜索引擎不能使更多的信息流通起来，所以有很多的商业公司瞄准了这个市场，于是就诞生了以上的那些产品，它们各有特色，互为补充，几乎每一个国内的互联网使用者都有用过其中一二。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个CS专业的大学生，书写博客是我们自身的需要，它不像在纸上书写，计算机显示技术能将我们想要表达的很多内容，清晰，明确的表现出来，举几个简单的例子：代码高亮，动态图演示等，都是书本不具有的，所以各种技术论坛，如CSDN、博客园、开源中国、Stack Overflow就应运而生，从一个方面来说，个人博客存在的意义已经不大了，但从另一个方面来说，个人博客与GitHub是一张好的名片。</p><p><strong><em>Talk is cheap. Show me the code.</em></strong><br>—<em>Linus Torvalds</em></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>博客建成就是你能看到的这个样子，功能基本齐全，评论功能由于体验十分糟糕所以弃用了 ，其他的一些功能觉得不必要就没有弄，如果你有什么问题和反馈可以从侧边栏使用邮件或者通过Github给我留言。<br>那些深度定制的博客十分惊艳，做之前可以先看看可以达到什么样的高度。</p><ul><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">Hexo博客深度优化样例</a></li></ul><p>在我建站的过程中，参考了大量他们的经验分享，这里我也将我的建站经历写出来，以供参考。</p><p>建站的首先需要安装一些软件，安装过程为了准确，我直接引用Hexo文档的内容，建议直接参考<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo的文档</a>，文档写的很漂亮。</p><hr><p><strong>以下关于Hexo配置的内容多来自Hexo官方网站</strong></p><p><em>我们正式开始</em></p><blockquote><p>什么是 Hexo？</p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>安装</p></blockquote><p>安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请提交问题，我会尽力解决您的问题。</p><blockquote><p>安装前提</p></blockquote><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><p><code>Node.js</code></p><p><code>Git</code></p><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><p><code>$ npm install -g hexo-cli</code></p><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p>Mac 用户</p></blockquote><p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <code>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</code> 安装命令行工具。</p><blockquote><p>安装 Git</p></blockquote><ul><li><p>Windows：下载并安装 git.</p></li><li><p>Mac：使用 Homebrew, MacPorts ：<code>brew install git</code>;或下载安装程序安装。</p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><blockquote><p>Windows 用户</p></blockquote><p>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考这个页面，收录了存储于百度云的下载地址。</p><blockquote><p>安装 Node.js</p></blockquote><p>安装 <code>Node.js</code> 的最佳方式是使用 nvm。</p><p><strong>cURL:</strong></p><p><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p><strong>Wget:</strong></p><p><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code></p><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><p><code>$ nvm install stable</code><br>或者您也可以下载 安装程序 来安装。</p><blockquote><p>Windows 用户</p></blockquote><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br>另外，您也可以使用<code>Git Bash</code>，这是<code>git for windows</code>自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装<code>Node.js</code>。打开它的方法很简单，在任意位置单击右键，选择<code>“Git Bash Here”</code>即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<code>Git Bash</code>来进行操作。</p><blockquote><p>安装 Hexo</p></blockquote><p>所有必备的应用程序安装完成后，即可使用<code>npm</code>安装 <code>Hexo</code>。</p><p><code>$ npm install -g hexo-cli</code></p><hr><p><em>到此为之你的Hexo博客所需的前提就已经准备完毕了，下一步需要生成一个Hexo文件并进行配置，一下内容同样来自Hexo的文档。</em></p><blockquote><p>建站</p></blockquote><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><p><code>$ hexo init &lt;folder&gt;</code></p><p><code>$ cd &lt;folder&gt;</code></p><p><code>$ npm install</code></p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── <span class="keyword">package</span>.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p><code>_config.yml</code>是网站的配置信息，您可以在此配置大部分的参数。</p><p><code>package.json</code><br>应用程序的信息。<code>EJS</code>, <code>Stylus</code> 和 <code>Markdown renderer</code> 已默认安装，您可以自由移除。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.2.4"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.1.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>scaffolds</p></blockquote><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。<br>例如，如果您修改<code>scaffold/post.md</code>中的<code>Front-matter</code>内容，那么每次新建一篇文章时都会包含这个修改。</p><blockquote><p>source</p></blockquote><p>资源文件夹是存放用户资源的地方。除<code>_posts</code>文件夹之外，开头命名为 <code>_</code>(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code>文件夹，而其他文件会被拷贝过去。</p><blockquote><p>themes</p></blockquote><p>主题文件夹。Hexo 会根据主题来生成静态页面。后面我们会为我们的博客安装NexT主题。</p><hr><p><em>又一里程碑，这一个部分我们需要对我们的博客进行配置，新手就按照官方文档配置就可以，先看到结果，后续你可以进行复杂的配置和高度的个性化定制，在博客上花时间越多，你就越理解Hexo这个框架的逻辑。</em></p><blockquote><p>配置</p></blockquote><p><strong>写在前面的话，网站的配置对格式的要求非常严格，特别是缩进的要求，一般都是冒号之后一个空格，然后参数值，这个问题需要特别主要，最好使用Atom之类的编辑器来编辑，因为它会根据不同的缩进有不同的颜色颜色</strong></p><p>您可以在 <code>_config.yml</code> 中修改大部份的配置。</p><blockquote><p>网站</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言 <strong><em>zh-Hans</em></strong></td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区，大陆使用的是 <strong><em>Asia/Shanghai</em></strong></td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的网站配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: GALAXY</span><br><span class="line">subtitle:</span><br><span class="line">description: 永远年轻，永远热泪盈眶</span><br><span class="line">keywords:</span><br><span class="line">author: 沼泽星空</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure><blockquote><p>网址</p></blockquote><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>网址，用于连接你部署的域名</td><td></td></tr><tr><td>Root</td><td>网站根目录</td><td></td></tr><tr><td>permalink</td><td>文章的永久链接</td><td>格式    :year/:month/:day/:title/</td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的网址配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://https://yangchaofu.cn/</span><br><span class="line">root: /</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>如果您的网站存放在子目录中，例如 <em><a href="http://yoursite.com/blog" target="_blank" rel="noopener">http://yoursite.com/blog</a></em>，则请将您的 url 设为 <em><a href="http://yoursite.com/blog" target="_blank" rel="noopener">http://yoursite.com/blog</a></em> 并把 root 设为 /blog/。</p><blockquote><p>目录</p></blockquote><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>source_dir</td><td>资源文件夹，这个文件夹用来存放内容。</td><td>source</td></tr><tr><td>public_dir</td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td>public</td></tr><tr><td>tag_dir</td><td>标签文件夹</td><td>tags</td></tr><tr><td>archive_dir</td><td>归档文件夹</td><td>archives</td></tr><tr><td>category_dir</td><td>分类文件夹</td><td>categories</td></tr><tr><td>code_dir</td><td>Include code 文件夹</td><td>downloads/code</td></tr><tr><td>i18n_dir</td><td>国际化（i18n）文件夹</td><td>:lang</td></tr><tr><td>skip_render</td><td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的目录配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p><em>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</em></p><blockquote><p>文章</p></blockquote><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>new_post_name</td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td>default_layout</td><td>预设布局</td><td>post</td></tr><tr><td>auto_spacing</td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td>titlecase</td><td>把标题转换为 title case(大写)</td><td>false</td></tr><tr><td>external_link</td><td>在新标签中打开链接</td><td>true</td></tr><tr><td>filename_case</td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td>render_drafts</td><td>显示草稿</td><td>false</td></tr><tr><td>post_asset_folder</td><td>启动 Asset 文件夹</td><td>false</td></tr><tr><td>relative_link</td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td>future</td><td>显示未来的文章</td><td>true</td></tr><tr><td>highlight</td><td>代码块的设置</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的文章配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Writing</span><br><span class="line">new_post_name: :title-:year-:month-:day.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br></pre></td></tr></table></figure><p><strong>相对地址</strong></p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是绝对于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p><blockquote><p>分类 &amp; 标签</p></blockquote><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>default_category</td><td>默认分类</td><td>uncategorized</td></tr><tr><td>category_map</td><td>分类别名</td><td></td></tr><tr><td>tag_map</td><td>标签别名</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的分类&amp;标签配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br></pre></td></tr></table></figure><blockquote><p>日期 / 时间格式</p></blockquote><p>Hexo 使用 Moment.js 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>date_format</td><td>日期格式</td><td>YYYY-MM-DD</td></tr><tr><td>time_format</td><td>时间格式</td><td>H:mm:ss</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的日期/时间配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br></pre></td></tr></table></figure><blockquote><p>分页</p></blockquote><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>per_page</td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td>10</td></tr><tr><td>pagination_dir</td><td>分页目录</td><td>page</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的分页配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure><blockquote><p>扩展</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>theme</td><td>当前主题名称。值为false时禁用主题</td></tr><tr><td>deploy</td><td>部署部分的设置</td></tr></tbody></table><blockquote><p><a href="https://yangchaofu.cn">本站的扩展配置</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  //这里需要注意，请严格按照以下格式来书写，避免麻烦，如果不想暴漏密码可以找网上的其他教程</span><br><span class="line">  repo: https://yourname:yourpassword@github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><em>以上我基本就是把官方文档抄了一遍，然后对应给出我的网站的配置，初看官方文档如同课本一样，会觉得晦涩难懂，但配合着我的配置和我的博客的外观，你应该能够多数看明白，所以，你即使看不懂也要大概的过一遍，自己建博客的时候就不会两眼一发黑。</em></p><p><em>以上的配置有一个地方初次使用时需要注意，即主题，NexT主题是需要下载安装的，未下载了配置可能会出错，主题安装在后续给出说明。</em></p><hr><p><em>又完成了一个重要步骤，下一过程你就可以创建你的第一篇博文并部署测试了</em></p><p><strong>几个重要的命令写在前面，使用博客过程中你会大量使用的这几条命令，先混个眼熟，有些命令是缩写，括号内部给出全程</strong></p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>hexo init</td><td>对一个文件夹进行初始化，进行Hexo的本地配置</td></tr><tr><td>hexo clean</td><td>对public中生成的文件进行删除</td></tr><tr><td>hexo g （generate）</td><td>根据sources文件中的博文和站点配置文件以及主题配置文件生成文件放入public</td></tr><tr><td>hexo d（deploy）</td><td>将public中的文件部署到_config.yml中deploy配置的地方</td></tr><tr><td>hexo s（server）</td><td>对博客进行本机测试，理解B/S结构程序的同学应该都明白，不明白不要紧</td></tr></tbody></table><p>_生成和部署命令可以混合使用，例如：<code>hexo g -d</code></p><blockquote><p>生成一篇本地新博文<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new "tiele"</span><br><span class="line">//事例</span><br><span class="line">hexo new 我的第一篇博文</span><br></pre></td></tr></table></figure></p></blockquote><p>该命令会生成一篇位于source/_posts/的博文，生成的博文会根据<code>_config.yml</code>的<code>new_post_name:</code>来生成博文名；还会根据 <em>scaffolds</em> 模版文件中的<code>post</code>中的内容对新建的博文进行填充一部分内容，你可以自己定义内部的内容。</p><p>比如本博客的博文名生成方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title-:year-:month-:day.md # File name of new posts</span><br></pre></td></tr></table></figure><p>根据以上事例就会得到这样一个博文名字：</p><p><strong><em>我的第一篇博文-2018年-5月-10日</em></strong></p><p>然后根据<code>scaffolds</code>中的post文件家生成的填充内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的第一篇博文-2018年-5月-10日</span><br><span class="line">comments: true      //开启评论功能，需要有外部的文件支持，由于体验不好所以，本博客暂时没有使用评论系统</span><br><span class="line">date: 2018-05-10 17:24:13 //创建时间</span><br><span class="line">tags:   //标签</span><br><span class="line">  - Hexo</span><br><span class="line">  - NexT</span><br><span class="line">categories: //分类，分类和标签在官方文档中有很好的说明</span><br><span class="line">  - 随笔</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>后面你就可以写你的博文内容了，Hexo默认使用的是Markdown来作为内容书写格式，你需要简单的学习一下Markdown语法，但是不是非常困难，可以依托互联网快速学习，其中有很多深入的东西，比如画图和数学公式可以稍微放一下，主要对标题、序列、代码、图片、超链接、表格、加粗、斜体等了解即可，当然，这么优雅的语言深入学习是必须的，还有，书写的时候可以配合html来做到更好的效果，官方也为我们提供了一些特别的标签，可以参考官方文档，使用一些插件，我们可以在我们的博文中引入图片和视频这些比较高大上的东西，这个内容在后续会单独说说道。<br>注意一点，博文会有阅读全部和部分的摘要两个方面，怎么分割呢，使用 <code>&lt;!-- more --&gt;</code>来实现</p><hr><p>第一篇博文写好了之后，就是使用控制台或者Git Bash进行发布的时候了，比如说我们使用Windows，我们用控制台进入到我们博客站点所在的文件夹下，然后进行<code>hexo g</code>命令生成文件，然后使用<code>hexo s</code>，在浏览器中输入<code>localhost:4000</code>进入预览，然后进行更改，觉得没有问题之后使用<code>hexo d</code>进行部署到GitHub的仓库中，在浏览器中输入yourgithubname.github.io即可进行访问。<br>你的第一篇博文就诞生了，但是官方主题相对第三方而言差了一点，所以我们复习要对它进行主题的更改，这里就需要安装NexT这个优雅的主题了，这里希望大家照着NexT的官方文档一步一步来，弄不清楚多看几遍，网络上的好多内容参差不齐，官方文档是相对而言最好的参考，质量有保证。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a></p><p>好，到这一步假设你已经安装好了NexT，并进行了一些配置，但是你肯定忘了一些，或者根本无从下手的，那么再从这几个地方看看，你配置了吗？</p><ul><li><a href="http://theme-next.iissnan.com/getting-started.html#select-scheme" target="_blank" rel="noopener">主题设置</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html#menu-settings" target="_blank" rel="noopener">菜单界面</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html#sidebar-settings" target="_blank" rel="noopener">侧边栏</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html#avatar-setting" target="_blank" rel="noopener">头像设置</a></li><li><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="noopener">统计功能</a></li><li><a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="noopener">不算子统计</a></li><li><a href="https://www.ezlippi.com/blog/2017/02/hexo-search.html" target="_blank" rel="noopener">本地搜索</a></li><li><a href="http://theme-next.iissnan.com/theme-settings.html#tags-page" target="_blank" rel="noopener">菜单页面的配置</a></li><li><a href="http://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme" target="_blank" rel="noopener">代码高亮</a></li><li><a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="noopener">外部链接</a></li></ul><p>根据NexT官方文档对该主题进行配置之后，你的博客将具有侧边栏的头像，侧边栏的链接,同时你的菜单将拥有关于，标签，归档，本地搜索这些菜单选项，已经十分强大了，基本上我们的博客就建立完毕了，如果你没有更多的要求，那么，已经可以收手了，博客主要还是要有内容的保证</p><hr><blockquote><p>深度的定制</p></blockquote><p>对于希望博客更加好用好看的同学，可以参考以下两个内容，第一个功能非常的繁多，可以从中选择自己喜欢的进行配置，而第二个就需要特别隆重的推荐一下了，我觉得这是Hexo建站的巅峰，我见过做过最好的一个，而且毫不吝啬的给出来深度定制的教程，好多内容可以从中参考，希望自己的博客也能如此漂亮的同学可以通过他给出的文档得到满足。</p><ul><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Hexo+NexT的众多配置选项</a></li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">Hexo博客深度优化</a><br>其中第二个强烈建议大家去预览看看，做的很漂亮，而且很工整，对大家后面书写博客和对博客个性化有巨大的帮助。</li></ul><p>还有一个问题是文件的存储问题，一般网络上都是使用网络存储空间然后引用的方法，这里推荐大家一个存储的地方，目前是免费的。</p><ul><li><a href="https://tu.aixinxi.net/index.php" target="_blank" rel="noopener">爱信息图床</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>牛顿曾经说过：我之所以能看的远，是因为我站在了巨人的肩膀上；IT界也有一种说法叫不到万不得已，不自己“造轮子”，其实他们是一样的概念，知识是人类巨大的宝库，参考别人的经验是一个人一生学习的技能。</p><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官方文档</a></li><li><a href="https://blog.csdn.net/lijiajun95/article/details/53862528" target="_blank" rel="noopener">最详细的Hexo Next主题配置教程</a></li><li><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">从零建站</a></li><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">Hexo+NexT的众多配置选项</a></li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">Hexo博客深度优化</a></li><li><a href="https://www.jianshu.com/p/f869d1940985" target="_blank" rel="noopener">玩转Hexo博客之Next</a></li><li><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="noopener">Hexo添加字数统计、阅读时长</a></li><li><a href="https://segmentfault.com/q/1010000009361385" target="_blank" rel="noopener">hexo搭建的博客如何给文章分类（NEXT主题）</a></li><li><a href="https://www.jianshu.com/p/f9ae2c892e44" target="_blank" rel="noopener">next主题之第三方评论系统</a></li><li><a href="https://www.jianshu.com/p/9a56f7c13a79" target="_blank" rel="noopener">Hexo Docs基本用法</a></li><li><a href="http://wingjay.com/" target="_blank" rel="noopener">建站启蒙</a></li><li><a href="https://notes.wanghao.work/" target="_blank" rel="noopener">部分内容参考</a></li><li><a href="https://www.jianshu.com/p/5d5931289c09" target="_blank" rel="noopener">Next主题(Hexo)</a></li><li><a href="https://segmentfault.com/a/1190000013660164#articleHeader1" target="_blank" rel="noopener">hexo搭建个人博客–NexT主题优化</a></li><li><a href="https://blog.csdn.net/u013384788/article/details/74079890" target="_blank" rel="noopener">Hexo博客中插入音乐</a></li><li><a href="http://www.ehcoo.com/seo.html" target="_blank" rel="noopener">Hexo-next百度和谷歌搜索优化</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人博客是继Email、BBS、IM之后的第四种网络信息传播方式，是一个区别于当前流行的（QQ空间，微信朋友圈，微信公众号，微博，贴吧，知乎，简书，论坛）信息分享平台，他有强烈的个人标识和非常高的个性化。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://yangchaofu.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hexo" scheme="https://yangchaofu.cn/tags/Hexo/"/>
    
      <category term="NexT" scheme="https://yangchaofu.cn/tags/NexT/"/>
    
      <category term="博客" scheme="https://yangchaofu.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="总结" scheme="https://yangchaofu.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="原创" scheme="https://yangchaofu.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>音乐|视频</title>
    <link href="https://yangchaofu.cn/%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95.html"/>
    <id>https://yangchaofu.cn/音乐和视频测试.html</id>
    <published>2018-05-09T15:09:47.000Z</published>
    <updated>2018-05-10T15:19:47.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-zHszdipG" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-zHszdipG"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "给未来的自己",              author: "杨宗纬",              url: "http://t1.aixinxi.net/o_1cd3o784g1osfsi9138p1gp0586a.mp3",              pic: "http://t1.aixinxi.net/o_1cd3oig311k0i19ig1dflpmqg3ba.jpg-w.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><div align="center">音乐就是最好的语言</div><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=445546453&auto=1&height=66"></iframe></p><div align="center">无人与我度余生……</div><br><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"http://hc.yinyuetai.com/uploads/videos/common/EA5C013B0C230B2FB98CD9AE6D08CEDF.flv?sc=78c58aee070a719f&br=777&vid=548425&aid=123&area=US&vst=2.mp4","pic":"https://i.loli.net/2018/05/10/5af32395de90a.png"},"danmaku":{"id":"11232345134","api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><br><div align="center">Viva La Vida（生命万岁）站立的角度不一样，就能看到不一样的世界</div>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer-zHszdipG&quot; class=&quot;aplayer aplayer-tag-marker&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
            &lt;pre class=&quot;aplayer-lrc-content&quot;&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;script&gt;
          var ap = new APlayer({
            element: document.getElementById(&quot;aplayer-zHszdipG&quot;),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: &quot;给未来的自己&quot;,
              author: &quot;杨宗纬&quot;,
              url: &quot;http://t1.aixinxi.net/o_1cd3o784g1osfsi9138p1gp0586a.mp3&quot;,
              pic: &quot;http://t1.aixinxi.net/o_1cd3oig311k0i19ig1dflpmqg3ba.jpg-w.jpg&quot;,
              lrc: &quot;&quot;
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        &lt;/script&gt;
&lt;div align=&quot;center&quot;&gt;音乐就是最好的语言&lt;/div&gt;
    
    </summary>
    
      <category term="随行" scheme="https://yangchaofu.cn/categories/%E9%9A%8F%E8%A1%8C/"/>
    
    
      <category term="音乐" scheme="https://yangchaofu.cn/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="视频" scheme="https://yangchaofu.cn/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>回首Java（一）</title>
    <link href="https://yangchaofu.cn/%E5%9B%9E%E9%A6%96Java%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>https://yangchaofu.cn/回首Java（一）.html</id>
    <published>2018-05-07T02:58:45.000Z</published>
    <updated>2018-05-10T15:14:36.885Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java的复习工作已经在进行，是为了后面的Web开发和安卓学习打下基础。Java语言是一门强大的语言，Java的出现是在C++语言之后，对C++语言的各种缺陷（被认为让人难以理解或者容易产生逻辑错误的地方）进行的各种改进而产生的一门面向对象的语言，它可以说是对C++语言的一次优秀的革命，使得C++这门强大的，扩展了强大的C语言，具有面向对象、面向过程两种设计模式的语言，变成了纯面向对象的语言，取消了指针（内存地址操作）这个比较难以弄懂的语言特征，并且带有诸如异常处理等高级特征，一经问世，备受追捧，久经沙场之后，走到了程序语言的顶峰，其强大特性直接或间接催生了C#这门与之十分相似的强大程序语言。</p><a id="more"></a><h4 id="Java中几个关键字的作用需要去了解一下-以前没有用过"><a href="#Java中几个关键字的作用需要去了解一下-以前没有用过" class="headerlink" title="Java中几个关键字的作用需要去了解一下,以前没有用过"></a>Java中几个关键字的作用需要去了解一下,以前没有用过</h4><p>对象相关</p><ul><li><del>implements</del> 用于实现接口，接口更像是一种约定，一个类可以实现多个接口</li><li><del>instanceof</del> 用于判断一个引用的类对象</li></ul><p>方法变量和类修饰符</p><ul><li><del>abstract</del>  用于修饰抽象类，抽象类是具有空方法的类，抽象类不能被实例化，抽象类的继承同普通类，抽象类和接口的区别后面会提到</li><li><code>transient</code></li><li><code>volatile</code></li><li><code>strcitfp</code></li></ul><h4 id="Java中变量作用域"><a href="#Java中变量作用域" class="headerlink" title="Java中变量作用域"></a>Java中变量作用域</h4><ul><li>一个变量位于类内部,成为字段或者属性,成员变量,Field</li><li>声明在方法内的变量,叫做局部变量,不能在类中使用这个变量</li><li>当一个变量被 <code>final</code> 修饰时,该变量只有一侧赋值机会,可用作常量的定义和设置不被继承</li></ul><h4 id="Java中的运算"><a href="#Java中的运算" class="headerlink" title="Java中的运算"></a>Java中的运算</h4><ul><li>同种变量类型运行(包括整形和浮点型),运算结果取类型较大的</li><li>逻辑运算分为长短两种,长逻辑需要两边都运算,短逻辑只需一边运算,逻辑或需要两边运算</li><li>位运算有位或和位与两种操作</li><li>位运算左移相当于乘2,右移相当于除2</li><li>有符号的数据左右移位,移位之后还是对应的符号;不带符号的数据左右移位,正负改变</li></ul><h4 id="Java中数组的使用"><a href="#Java中数组的使用" class="headerlink" title="Java中数组的使用"></a>Java中数组的使用</h4><ul><li><code>Array.toString</code>方法用来打印十分方便</li><li><code>System.arraycopy(src, srcPos, dest, destPos, lengtObject)</code>的用法,<br><code>@parm src</code>: 源数组<br><code>@parm srcPos</code>: 从源数组复制数据的起始位置<br><code>@parm dest</code>: 目标数组<br><code>@parm destPos</code>: 复制到目标数组的起始位置<br><code>@parm lengtObject</code>: 复制的长度<br>的用法</li><li><code>Arrays</code>的各种用法</li></ul><ol><li>coypOfRang — 数组复制</li><li>toString — 转换为字符串</li><li>sort —排序</li><li>binarySearch — 搜索</li><li>equals — 判断是否相等</li><li>fill — 填充数组</li></ol><ul><li>Java中Arrays. sort使用了两种排序方法，快速排序和优化的合并排序。<br>快速排序主要是对哪些基本类型数据（<code>int</code>,<code>short</code>,<code>long</code>等）排序。<br>而合并排序用于对对象类型进行排序。原因：<br>使用不同类型的排序算法主要是由于快速排序是不稳定的，而合并排序是稳定的。<br>这里的稳定是指比较相等的数据在排序之后仍然按照排序之前的前后顺序排列。<br>对于基本数据类型，稳定性没有意义，而对于对象类型，稳定性是比较重要的，<br>因为对象相等的判断可能只是判断关键属性，最好保持相等对象的非关键属性的<br>顺序与排序前一直。另外一个原因是由于合并排序相对而言比较次数比快速排序少，移动（对象引用的移动）次数比快速排序多，而对于对象来说，移动是简单的，只是引用的转换，但是比较相对更加耗时。合并排序的时间复杂度是<code>n*logn</code>, 快速排序的平均时间复杂度也是<code>n*logn</code>，但是合并排序的需要额外的<code>n个引用</code>的空间。</li></ul><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><ul><li>引用的概念，如果一个变量的类型是 类类型，而非基本类型，那么该变量又叫做引用。例:<code>new XXX()</code>;就是一个引用,它不是基本类型,而是 类类型.</li><li><p><code>Object Object = new Object()</code>;<br>Object这个变量是Object类型，又叫做引用<br>=的意思指的Object这个引用代表右侧创建的对象<br>“代表” 在面向对象里，又叫做“指向”.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  String objectName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Object();</span><br><span class="line">Object object = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个引用同时时间可以指向多个引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object Object1 = <span class="keyword">new</span> Object();</span><br><span class="line">Object object2 = object1;  <span class="comment">//Object2指向Object1所指向的对象</span></span><br><span class="line">Object object3 = object1;</span><br><span class="line">Object object4 = object1;</span><br><span class="line">Object object5 = object4;</span><br><span class="line"><span class="comment">//所有的object1,2,3,4,5同时指向一个Object对象</span></span><br></pre></td></tr></table></figure></li><li><p>方法重载的概念,重载就是同样名字的方法可以写多个,每个方法有不同的参数列表,在使用是,JVM根据传人的参数数量自动识别并调用对应的方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> returnType <span class="title">mehod</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> returnType <span class="title">mehod</span><span class="params">(type a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> returnType <span class="title">mehod</span><span class="params">(type x,type y)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>构造方法的概念每一个类都有一个构造方法,构造方法可以重载,不写时默认有一个无参构造方法,构造方法名与类名相同,构造方法无返回值,可见性为<code>public</code>,当使用<code>new</code>关键字引用一个对象时,默认调用该对象的构造方法.</p></li><li>使用<code>static</code>修饰的的方法或者属性,叫做类方法和类属性,一个被声明静态的属性和方法,被所有对象共享,建议使用类来获取该属性和方法,一突出其类属性和类方法的概念,与之对应的叫做对象属性和对象方法.</li><li>Java中使用文档注释，可以才新建项目的时候勾选添加注释，也可以是使用快捷键<code>Alt+Shift+J</code>键进行添加,注释的基本写法如下,使用官方提供的注释标识,常用的如下表:</li></ul><table><thead><tr><th>标记</th><th>标识</th><th>用于</th></tr></thead><tbody><tr><td>@author</td><td>作者</td><td>类注释</td></tr><tr><td>@version</td><td>当前软件版本</td><td>类注释</td></tr><tr><td>@since</td><td>JDK版本</td><td>类注释</td></tr><tr><td>@see</td><td>链接到其他Javadoc</td><td>类注释</td></tr><tr><td>{@link}</td><td>统@see,使用更加自由,可以在前面添加描述信息</td><td>类注释</td></tr><tr><td>@param</td><td>参数详解,后面跟参数名</td><td>方法注释</td></tr><tr><td>@return</td><td>返回值详解</td><td>方法注释</td></tr></tbody></table><ul><li>单例模式具有两种写法，使用单例模式在JVM中只能实例化一个对象，在一些特定场景使用单例模式是必要的，比如在GUI中使用的的Frame，在一些设计场景中的只有一个的对象。<br>单例模式有两种实现方式，下面的代码分别对这两只模式进行解读。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">  <span class="comment">//私有化构造方法，使对象无法示例化新的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Object1</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//实例化一个该类的对象</span></span><br><span class="line">  <span class="keyword">private</span> Object instance  = <span class="keyword">new</span> Object()；</span><br><span class="line">  <span class="comment">//获取该类的单例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span></span>&#123;s</span><br><span class="line">  <span class="comment">//私有化构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Object</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//定义一个本类型的属性</span></span><br><span class="line">  <span class="keyword">private</span> Object instance;</span><br><span class="line">  <span class="comment">//获取该类的单例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">      instace = <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>两种模式使用时的选择，如果在构造方法中有大量的需要初始化的东西，代码量大的情况下，使用饿汉式可以减少时间，提高效率；懒汉式具有线程安全的考虑。</p><ul><li>枚举类型。枚举也是一种类，是对一些常量的定义，最简单的例子，一个星期五天，一年四个季节使用枚举可以表述的更清晰（相比于使用1、2、3、4）这样的样例还有很多，实际使用的时候需要多作考虑。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season&#123;</span><br><span class="line">  SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口与继承"><a href="#接口与继承" class="headerlink" title="接口与继承"></a>接口与继承</h4><ul><li><p>接口的意义，接口相当于一种约定，实现某一个接口就必须要实现该接口中的方法。Java中一个子类只能继承一个父类，但是可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntFace</span></span>&#123;</span><br><span class="line">  <span class="comment">//继承该接口必须实现method方法</span></span><br><span class="line">  <span class="function">pulic <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用implements关键字实现接口，实现接口中的method方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Obejcet</span> <span class="keyword">implements</span> <span class="title">IntFace</span></span>&#123;</span><br><span class="line">  <span class="comment">//重载接口的方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型和对象的概念，如何一个非基本数据类型定义出来的变量都称为引用，而使用new 关键字调用构造方法生成的，就叫做对象类型。引用类型转换的指向可以由子类向父类转换。这样是一定成功的，比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java中所有的类都是Object的子类，所以以一个这样的例子来介绍引用类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Obejcet</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//理解方法：把右边的当作左边的用，看行不行得通</span></span><br><span class="line"><span class="comment">//该例中，把对象类型A当作父类性Object是完全说的通的，所以可行</span></span><br><span class="line"></span><br><span class="line">Obejcet obj = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure></li><li><p>如何判断一个引用类型的的对象，使用instanceof关键字可以确定一个引用指向的对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object1();</span><br><span class="line">System.out.print(obj <span class="keyword">instanceof</span> Object);</span><br></pre></td></tr></table></figure></li><li><p>重写和覆盖<br>与重写类似，方法的重写是子类覆盖父类的对象方法 ；<br>隐藏，就是子类覆盖父类的类方法。</p></li><li>super关键字可以在子类中调用父类的有参构造方法（子类默认调用父类的无参构造方法而且是一定会调用），使用super关键字可以调用父类的属性和方法。</li><li>Object是所有子类的父类，Object有如下方法：<br><div align="center"><br>Object具有的方法</div></li></ul><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>toString</td><td>对象的字符串表达</td></tr><tr><td>finalize</td><td>垃圾回收时调用该方法</td></tr><tr><td>equals</td><td>用于判断两个对象的内容是否相等</td></tr><tr><td>hashCode</td><td></td></tr><tr><td>wait、notify，notifyAll</td><td>线程同步方法</td></tr><tr><td>getClass</td><td>返回一个对象的类对象</td></tr></tbody></table><p></p><ul><li>final关键字修饰类，方法，基本类型变量和引用类型时有不同的含义</li></ul><table><thead><tr><th>修饰</th><th>意义</th></tr></thead><tbody><tr><td>类</td><td>该类不能被继承</td></tr><tr><td>方法</td><td>该方法不能被重写</td></tr><tr><td>基本类型变量</td><td>该基本类型变量只能被赋值一次</td></tr><tr><td>引用</td><td>该引用只有一次指向对象的机会</td></tr></tbody></table><ul><li>抽象类</li></ul><p>*来自<a href="www.how2j.cn">how2.cn</a>抽象类内容</p><p>在类中声明一个方法，这个方法没有实现体，是一个“空”方法，这样的方法就叫抽象方法，使用修饰符“abstract” 当一个类有抽象方法的时候，该类必须被声明为抽象类。</p><ol><li>继承抽象类的子类<strong>必须提供</strong>不一样的抽象方法；</li><li>抽象类不能被实例化；</li><li>抽象类和接口的区别</li></ol><table><thead><tr><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>子类只能继承一个抽象类，不能继承多个，抽象类的继承同普通类</td><td>子类可以实现多个接口</td></tr><tr><td>抽象类可以被定义 public、protected、package、private，静态和非静态属性</td><td>接口只能被定义为public、静态和final的，即使书写的时候没有用到public static final。。也会自动添加上去</td></tr></tbody></table><p>接口当成一个协议，实现了这个接口（协议）的类就应该实现接口中的方法（协议内的条例），接口是约束调用本接口的类而不是给类提供能力。<br>抽象类则是让继承此类的子类一定要实现某个方法。例如取快递是一个抽象类，签收是抽象方法，那么一定要实现签收方法才能完成取快递。</p><p>本部分为Java的基础内容，记录并常回顾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的复习工作已经在进行，是为了后面的Web开发和安卓学习打下基础。Java语言是一门强大的语言，Java的出现是在C++语言之后，对C++语言的各种缺陷（被认为让人难以理解或者容易产生逻辑错误的地方）进行的各种改进而产生的一门面向对象的语言，它可以说是对C++语言的一次优秀的革命，使得C++这门强大的，扩展了强大的C语言，具有面向对象、面向过程两种设计模式的语言，变成了纯面向对象的语言，取消了指针（内存地址操作）这个比较难以弄懂的语言特征，并且带有诸如异常处理等高级特征，一经问世，备受追捧，久经沙场之后，走到了程序语言的顶峰，其强大特性直接或间接催生了C#这门与之十分相似的强大程序语言。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://yangchaofu.cn/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="原创" scheme="https://yangchaofu.cn/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Java" scheme="https://yangchaofu.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://yangchaofu.cn/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B.html"/>
    <id>https://yangchaofu.cn/新的开始.html</id>
    <published>2018-04-13T15:57:12.000Z</published>
    <updated>2018-05-09T09:55:26.384Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>仰望星空，脚踏实地。突然说出这句话可能有点突兀，但是经历了岁月二十二载的洗礼，对这几个字的理解也越发深刻，不断的跌倒，不断的再出发，让自己的内心也越发的坚强和健全，新的开始不是彻底与过去说再见，也不去否定过去的自己，而是以一种更加积极的态度去面对生活这个难题，迎接新的开始</p><a id="more"></a><blockquote><p>一直想要一个自己的博客，毕竟自己学习计科专业，经常书写技术总结是很必要的。自己在这个专业摸爬滚打了三年了，期间有所得，有所失，但是凡事只要肯付出时间和精力，总能做成。进入大学的这几年，心理变化是起伏不定的，这几年时光是生命中最美好的时光，自己也慢慢学会了与自己相处，与世界相处，内心深处开始不断的悦纳自己，同时悦纳世界，余生的目标是尽自己最大的努力把生活过好，能做到什么程度无所谓，只希望以后回头看看自己走过的路，笑着对自己说：不枉人间走一遭。</p></blockquote><h3 id="回顾过去的三年"><a href="#回顾过去的三年" class="headerlink" title="回顾过去的三年"></a>回顾过去的三年</h3><p>三年的时间转瞬即逝，人最可悲的事情往往是事后才明白当初应该走什么路。事实证明，我选了一个我喜欢的专业，我愿意为之付出时间并觉得这是值得的，这比什么都重要。至于学校的问题我想大可不必去过多的考虑，我觉得一所好的学校能够给一个学生超前的思想境界，而相反也一样，一所差的学校会限制学生的观念、境界和想法，但这不是绝对的，思想是自由的，人也是自由的，正如《肖申克的救赎》里瑞德说的：“有些鸟儿是永远关不住的，因为它们的每一片羽翼上都沾满了自由的光辉！”</p><p>三年来，有懈怠的时光，也有努力的时光，对于我来说，它们同样的难能可贵，这些时间堆砌出了我的性格，我的阅历和我的能力，同样还有我的懒惰，我的不足和我的缺陷。三年时间学了很多东西，有真心想学的，有学了忘了的，也有学了之后，对我的生活和想法产生了巨大影响的，我开始有了计算机思维，懂得用机器去解决生活中的实际问题，并一直在路上。</p><p>也追逐了自己的信仰，走上了无产阶级政党的道路，正如马克思在《青年在选择职业的考虑》中所说的：“如果我们选择了最能为人类福利而劳动的职业，那么，重担就不能把我们压倒，因为这是为大家而献身；那时我们所感到的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将默默地、但是永恒发挥作用地存在下去，面对我们的骨灰，高尚的人们将洒下热泪。”而我的理想，我想没有比这更好的解释了，那些默默无闻的推动了整个人类进程的人，那些为国家建设，民族振兴而付出努力的人，无论商人、政客、教师、医生，农民，工人，他们的生命是光辉的，他们为取得自己生命的意义而不懈努力，这里想到一句话，在《钢铁是怎样炼成的》一书中，奥斯特洛夫斯基说过：“人最宝贵的东西是生命,生命对于每个人都只有一次. 一个人的一生应该是这样度过的：当他回首往事的时候，他不会因为虚度年华而悔恨，也不会因为碌碌无为而羞耻；这样，在临死的时候，他就能够说：我的整个生命和全部精力，都已经献给世界上最壮丽的事业——为人类的解放而斗争。”这些影响着我个人的思想的，无论文字，语录还是那些对我言传身教的人，塑造了我的世界观、人生观和价值观，并将在我的一生中，持续下去。</p><h3 id="对剩余大学时光的一些规划"><a href="#对剩余大学时光的一些规划" class="headerlink" title="对剩余大学时光的一些规划"></a>对剩余大学时光的一些规划</h3><p>人生的道路上需要不断的思考，反省，但如何思考，如何反省这是一个问题。人除了需要物质生活之外，还需要精神食量，而最好的精神食量，就是那些好书，那些给予人以改变，让人看清物质本原，指导人前进的有思想的书；那些给予我们解决现实生活中各种问题的，告诉我们物质变化逻辑的技术书；那些告诉我们生活色彩，讲述现实的故事书，那些叙述史实，总结前人故事的历史书等等。这些书让我们有自己独立的灵魂，能够看到自己存在的意义，知道世界变化的客观规律，并告诉我们什么是善，什么是恶。<br>所以，对于大学剩下的时光，第一要求就是读书，无论能不能读懂，都需要把那些公认的好书，读一遍再走，不然浪费了大学的名头，也侮辱了大学生这个词。后续的读书计划及读书心得将在后面的博文里出现。</p><p>“人应该有一技之长”，这是诺顿对安迪所说的话，而这是我生活中信奉的圣经，无论在那，无论干什么，人应该有一技之长，并且知根知底，所以，我把计算机技术当作我的那一技之长，我需要为之付出的努力，将变成人生中的积累，不断沉淀。那要怎么将它变成一技之长呢，唯有合理的学习和提升安排才能做到。</p><p>提升自己的外语水平，这一点和前面的对应，对于我来说，英语的重要性不言而喻，我必须学好英语，否则就是空谈，不踩在巨人的肩膀上，看到的永远是无尽的山峦险岳，而巨人用英语。</p><p>时间易逝难追，对于我这样一出生就没有拿到一手好牌的人，只能打好手中的烂牌。上天对我们唯一的公平就是时间。时间如此宝贵，那人生不能走一步算一步，及早的规划人生是重要的，我想我以后的生活可能会艰难的多，但只要用心了，认真的考虑之后就没有问题。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>“心怀希望是一件好事，也许是最好的事，心怀希望，就永远有希望”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仰望星空，脚踏实地。突然说出这句话可能有点突兀，但是经历了岁月二十二载的洗礼，对这几个字的理解也越发深刻，不断的跌倒，不断的再出发，让自己的内心也越发的坚强和健全，新的开始不是彻底与过去说再见，也不去否定过去的自己，而是以一种更加积极的态度去面对生活这个难题，迎接新的开始&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://yangchaofu.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="https://yangchaofu.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
