<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>音乐和视频测试</title>
      <link href="/2018/05/09/%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/05/09/%E9%9F%B3%E4%B9%90%E5%92%8C%E8%A7%86%E9%A2%91%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=445546453&auto=1&height=66"></iframe></p><h4 id="无人与我度余生……"><a href="#无人与我度余生……" class="headerlink" title="无人与我度余生……"></a>无人与我度余生……</h4><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"http://hc.yinyuetai.com/uploads/videos/common/EA5C013B0C230B2FB98CD9AE6D08CEDF.flv?sc=78c58aee070a719f&br=777&vid=548425&aid=123&area=US&vst=2.mp4","pic":"https://i.loli.net/2018/05/10/5af32395de90a.png"},"danmaku":{"id":"11232345134","api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><h4 id="Viva-La-Vida（生命万岁）站立的角度不一样，就能看到不一样的世界"><a href="#Viva-La-Vida（生命万岁）站立的角度不一样，就能看到不一样的世界" class="headerlink" title="Viva La Vida（生命万岁）站立的角度不一样，就能看到不一样的世界"></a>Viva La Vida（生命万岁）站立的角度不一样，就能看到不一样的世界</h4>]]></content>
      
      <categories>
          
          <category> 随行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回首Java（一）</title>
      <link href="/2018/05/07/2018-5-7-%E5%9B%9E%E9%A6%96Java%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/05/07/2018-5-7-%E5%9B%9E%E9%A6%96Java%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java的复习工作已经在进行，是为了后面的Web开发和安卓学习打下基础。Java语言是一门强大的语言，Java的出现是在C++语言之后，对C++语言的各种缺陷（被认为让人难以理解或者容易产生逻辑错误的地方）进行的各种改进而产生的一门面向对象的语言，它可以说是对C++语言的一次优秀的革命，使得C++这门强大的，扩展了强大的C语言，具有面向对象、面向过程两种设计模式的语言，变成了纯面向对象的语言，取消了指针（内存地址操作）这个比较难以弄懂的语言特征，并且带有诸如异常处理等高级特征，一经问世，备受追捧，久经沙场之后，走到了程序语言的顶峰，其强大特性直接或间接催生了C#这门与之十分相似的强大程序语言。</p><a id="more"></a><h4 id="Java中几个关键字的作用需要去了解一下-以前没有用过"><a href="#Java中几个关键字的作用需要去了解一下-以前没有用过" class="headerlink" title="Java中几个关键字的作用需要去了解一下,以前没有用过"></a>Java中几个关键字的作用需要去了解一下,以前没有用过</h4><p>对象相关</p><ul><li><del>implements</del> 用于实现接口，接口更像是一种约定，一个类可以实现多个接口</li><li><del>instanceof</del> 用于判断一个引用的类对象</li></ul><p>方法变量和类修饰符</p><ul><li><del>abstract</del>  用于修饰抽象类，抽象类是具有空方法的类，抽象类不能被实例化，抽象类的继承同普通类，抽象类和接口的区别后面会提到</li><li><code>transient</code></li><li><code>volatile</code></li><li><code>strcitfp</code></li></ul><h4 id="Java中变量作用域"><a href="#Java中变量作用域" class="headerlink" title="Java中变量作用域"></a>Java中变量作用域</h4><ul><li>一个变量位于类内部,成为字段或者属性,成员变量,Field</li><li>声明在方法内的变量,叫做局部变量,不能在类中使用这个变量</li><li>当一个变量被 <code>final</code> 修饰时,该变量只有一侧赋值机会,可用作常量的定义和设置不被继承</li></ul><h4 id="Java中的运算"><a href="#Java中的运算" class="headerlink" title="Java中的运算"></a>Java中的运算</h4><ul><li>同种变量类型运行(包括整形和浮点型),运算结果取类型较大的</li><li>逻辑运算分为长短两种,长逻辑需要两边都运算,短逻辑只需一边运算,逻辑或需要两边运算</li><li>位运算有位或和位与两种操作</li><li>位运算左移相当于乘2,右移相当于除2</li><li>有符号的数据左右移位,移位之后还是对应的符号;不带符号的数据左右移位,正负改变</li></ul><h4 id="Java中数组的使用"><a href="#Java中数组的使用" class="headerlink" title="Java中数组的使用"></a>Java中数组的使用</h4><ul><li><code>Array.toString</code>方法用来打印十分方便</li><li><code>System.arraycopy(src, srcPos, dest, destPos, lengtObject)</code>的用法,<br><code>@parm src</code>: 源数组<br><code>@parm srcPos</code>: 从源数组复制数据的起始位置<br><code>@parm dest</code>: 目标数组<br><code>@parm destPos</code>: 复制到目标数组的起始位置<br><code>@parm lengtObject</code>: 复制的长度<br>的用法</li><li><code>Arrays</code>的各种用法</li></ul><ol><li>coypOfRang — 数组复制</li><li>toString — 转换为字符串</li><li>sort —排序</li><li>binarySearch — 搜索</li><li>equals — 判断是否相等</li><li>fill — 填充数组</li></ol><ul><li>Java中Arrays. sort使用了两种排序方法，快速排序和优化的合并排序。<br>快速排序主要是对哪些基本类型数据（<code>int</code>,<code>short</code>,<code>long</code>等）排序。<br>而合并排序用于对对象类型进行排序。原因：<br>使用不同类型的排序算法主要是由于快速排序是不稳定的，而合并排序是稳定的。<br>这里的稳定是指比较相等的数据在排序之后仍然按照排序之前的前后顺序排列。<br>对于基本数据类型，稳定性没有意义，而对于对象类型，稳定性是比较重要的，<br>因为对象相等的判断可能只是判断关键属性，最好保持相等对象的非关键属性的<br>顺序与排序前一直。另外一个原因是由于合并排序相对而言比较次数比快速排序少，移动（对象引用的移动）次数比快速排序多，而对于对象来说，移动是简单的，只是引用的转换，但是比较相对更加耗时。合并排序的时间复杂度是<code>n*logn</code>, 快速排序的平均时间复杂度也是<code>n*logn</code>，但是合并排序的需要额外的<code>n个引用</code>的空间。</li></ul><h4 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h4><ul><li>引用的概念，如果一个变量的类型是 类类型，而非基本类型，那么该变量又叫做引用。例:<code>new XXX()</code>;就是一个引用,它不是基本类型,而是 类类型.</li><li><p><code>Object Object = new Object()</code>;<br>Object这个变量是Object类型，又叫做引用<br>=的意思指的Object这个引用代表右侧创建的对象<br>“代表” 在面向对象里，又叫做“指向”.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  String objectName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Object();</span><br><span class="line">Object object = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个引用同时时间可以指向多个引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object Object1 = <span class="keyword">new</span> Object();</span><br><span class="line">Object object2 = object1;  <span class="comment">//Object2指向Object1所指向的对象</span></span><br><span class="line">Object object3 = object1;</span><br><span class="line">Object object4 = object1;</span><br><span class="line">Object object5 = object4;</span><br><span class="line"><span class="comment">//所有的object1,2,3,4,5同时指向一个Object对象</span></span><br></pre></td></tr></table></figure></li><li><p>方法重载的概念,重载就是同样名字的方法可以写多个,每个方法有不同的参数列表,在使用是,JVM根据传人的参数数量自动识别并调用对应的方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> returnType <span class="title">mehod</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> returnType <span class="title">mehod</span><span class="params">(type a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> returnType <span class="title">mehod</span><span class="params">(type x,type y)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>构造方法的概念每一个类都有一个构造方法,构造方法可以重载,不写时默认有一个无参构造方法,构造方法名与类名相同,构造方法无返回值,可见性为<code>public</code>,当使用<code>new</code>关键字引用一个对象时,默认调用该对象的构造方法.</p></li><li>使用<code>static</code>修饰的的方法或者属性,叫做类方法和类属性,一个被声明静态的属性和方法,被所有对象共享,建议使用类来获取该属性和方法,一突出其类属性和类方法的概念,与之对应的叫做对象属性和对象方法.</li><li>Java中使用文档注释，可以才新建项目的时候勾选添加注释，也可以是使用快捷键<code>Alt+Shift+J</code>键进行添加,注释的基本写法如下,使用官方提供的注释标识,常用的如下表:</li></ul><table><thead><tr><th>标记</th><th>标识</th><th>用于</th></tr></thead><tbody><tr><td>@author</td><td>作者</td><td>类注释</td></tr><tr><td>@version</td><td>当前软件版本</td><td>类注释</td></tr><tr><td>@since</td><td>JDK版本</td><td>类注释</td></tr><tr><td>@see</td><td>链接到其他Javadoc</td><td>类注释</td></tr><tr><td>{@link}</td><td>统@see,使用更加自由,可以在前面添加描述信息</td><td>类注释</td></tr><tr><td>@param</td><td>参数详解,后面跟参数名</td><td>方法注释</td></tr><tr><td>@return</td><td>返回值详解</td><td>方法注释</td></tr></tbody></table><ul><li>单例模式具有两种写法，使用单例模式在JVM中只能实例化一个对象，在一些特定场景使用单例模式是必要的，比如在GUI中使用的的Frame，在一些设计场景中的只有一个的对象。<br>单例模式有两种实现方式，下面的代码分别对这两只模式进行解读。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">  <span class="comment">//私有化构造方法，使对象无法示例化新的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Object1</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//实例化一个该类的对象</span></span><br><span class="line">  <span class="keyword">private</span> Object instance  = <span class="keyword">new</span> Object()；</span><br><span class="line">  <span class="comment">//获取该类的单例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span></span>&#123;s</span><br><span class="line">  <span class="comment">//私有化构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Object</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//定义一个本类型的属性</span></span><br><span class="line">  <span class="keyword">private</span> Object instance;</span><br><span class="line">  <span class="comment">//获取该类的单例</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == instance)&#123;</span><br><span class="line">      instace = <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>两种模式使用时的选择，如果在构造方法中有大量的需要初始化的东西，代码量大的情况下，使用饿汉式可以减少时间，提高效率；懒汉式具有线程安全的考虑。</p><ul><li>枚举类型。枚举也是一种类，是对一些常量的定义，最简单的例子，一个星期五天，一年四个季节使用枚举可以表述的更清晰（相比于使用1、2、3、4）这样的样例还有很多，实际使用的时候需要多作考虑。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season&#123;</span><br><span class="line">  SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口与继承"><a href="#接口与继承" class="headerlink" title="接口与继承"></a>接口与继承</h4><ul><li><p>接口的意义，接口相当于一种约定，实现某一个接口就必须要实现该接口中的方法。Java中一个子类只能继承一个父类，但是可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IntFace</span></span>&#123;</span><br><span class="line">  <span class="comment">//继承该接口必须实现method方法</span></span><br><span class="line">  <span class="function">pulic <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用implements关键字实现接口，实现接口中的method方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Obejcet</span> <span class="keyword">implements</span> <span class="title">IntFace</span></span>&#123;</span><br><span class="line">  <span class="comment">//重载接口的方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型和对象的概念，如何一个非基本数据类型定义出来的变量都称为引用，而使用new 关键字调用构造方法生成的，就叫做对象类型。引用类型转换的指向可以由子类向父类转换。这样是一定成功的，比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java中所有的类都是Object的子类，所以以一个这样的例子来介绍引用类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Obejcet</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//理解方法：把右边的当作左边的用，看行不行得通</span></span><br><span class="line"><span class="comment">//该例中，把对象类型A当作父类性Object是完全说的通的，所以可行</span></span><br><span class="line"></span><br><span class="line">Obejcet obj = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure></li><li><p>如何判断一个引用类型的的对象，使用instanceof关键字可以确定一个引用指向的对象类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object1();</span><br><span class="line">System.out.print(obj <span class="keyword">instanceof</span> Object);</span><br></pre></td></tr></table></figure></li><li><p>重写和覆盖<br>与重写类似，方法的重写是子类覆盖父类的对象方法 ；<br>隐藏，就是子类覆盖父类的类方法。</p></li><li>super关键字可以在子类中调用父类的有参构造方法（子类默认调用父类的无参构造方法而且是一定会调用），使用super关键字可以调用父类的属性和方法。</li><li>Object是所有子类的父类，Object有如下方法：<br><div align="center"><br>Object具有的方法</div></li></ul><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>toString</td><td>对象的字符串表达</td></tr><tr><td>finalize</td><td>垃圾回收时调用该方法</td></tr><tr><td>equals</td><td>用于判断两个对象的内容是否相等</td></tr><tr><td>hashCode</td><td></td></tr><tr><td>wait、notify，notifyAll</td><td>线程同步方法</td></tr><tr><td>getClass</td><td>返回一个对象的类对象</td></tr></tbody></table><p></p><ul><li>final关键字修饰类，方法，基本类型变量和引用类型时有不同的含义</li></ul><table><thead><tr><th>修饰</th><th>意义</th></tr></thead><tbody><tr><td>类</td><td>该类不能被继承</td></tr><tr><td>方法</td><td>该方法不能被重写</td></tr><tr><td>基本类型变量</td><td>该基本类型变量只能被赋值一次</td></tr><tr><td>引用</td><td>该引用只有一次指向对象的机会</td></tr></tbody></table><ul><li>抽象类</li></ul><p>*来自<a href="www.how2j.cn">how2.cn</a>抽象类内容</p><p>在类中声明一个方法，这个方法没有实现体，是一个“空”方法，这样的方法就叫抽象方法，使用修饰符“abstract” 当一个类有抽象方法的时候，该类必须被声明为抽象类。</p><ol><li>继承抽象类的子类<strong>必须提供</strong>不一样的抽象方法；</li><li>抽象类不能被实例化；</li><li>抽象类和接口的区别</li></ol><table><thead><tr><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>子类只能继承一个抽象类，不能继承多个，抽象类的继承同普通类</td><td>子类可以实现多个接口</td></tr><tr><td>抽象类可以被定义 public、protected、package、private，静态和非静态属性</td><td>接口只能被定义为public、静态和final的，即使书写的时候没有用到public static final。。也会自动添加上去</td></tr></tbody></table><p>接口当成一个协议，实现了这个接口（协议）的类就应该实现接口中的方法（协议内的条例），接口是约束调用本接口的类而不是给类提供能力。<br>抽象类则是让继承此类的子类一定要实现某个方法。例如取快递是一个抽象类，签收是抽象方法，那么一定要实现签收方法才能完成取快递。</p><p>本部分为Java的基础内容，记录并常回顾。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新的开始</title>
      <link href="/2018/04/13/2018-4-14-%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>/2018/04/13/2018-4-14-%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>仰望星空，脚踏实地。突然说出这句话可能有点突兀，但是经历了岁月二十二载的洗礼，对这几个字的理解也越发深刻，不断的跌倒，不断的再出发，让自己的内心也越发的坚强和健全，新的开始不是彻底与过去说再见，也不去否定过去的自己，而是以一种更加积极的态度去面对生活这个难题，迎接新的开始</p><a id="more"></a><blockquote><p>一直想要一个自己的博客，毕竟自己学习计科专业，经常书写技术总结是很必要的。自己在这个专业摸爬滚打了三年了，期间有所得，有所失，但是凡事只要肯付出时间和精力，总能做成。进入大学的这几年，心理变化是起伏不定的，这几年时光是生命中最美好的时光，自己也慢慢学会了与自己相处，与世界相处，内心深处开始不断的悦纳自己，同时悦纳世界，余生的目标是尽自己最大的努力把生活过好，能做到什么程度无所谓，只希望以后回头看看自己走过的路，笑着对自己说：不枉人间走一遭。</p></blockquote><h3 id="回顾过去的三年"><a href="#回顾过去的三年" class="headerlink" title="回顾过去的三年"></a>回顾过去的三年</h3><p>三年的时间转瞬即逝，人最可悲的事情往往是事后才明白当初应该走什么路。事实证明，我选了一个我喜欢的专业，我愿意为之付出时间并觉得这是值得的，这比什么都重要。至于学校的问题我想大可不必去过多的考虑，我觉得一所好的学校能够给一个学生超前的思想境界，而相反也一样，一所差的学校会限制学生的观念、境界和想法，但这不是绝对的，思想是自由的，人也是自由的，正如《肖申克的救赎》里瑞德说的：“有些鸟儿是永远关不住的，因为它们的每一片羽翼上都沾满了自由的光辉！”</p><p>三年来，有懈怠的时光，也有努力的时光，对于我来说，它们同样的难能可贵，这些时间堆砌出了我的性格，我的阅历和我的能力，同样还有我的懒惰，我的不足和我的缺陷。三年时间学了很多东西，有真心想学的，有学了忘了的，也有学了之后，对我的生活和想法产生了巨大影响的，我开始有了计算机思维，懂得用机器去解决生活中的实际问题，并一直在路上。</p><p>也追逐了自己的信仰，走上了无产阶级政党的道路，正如马克思在《青年在选择职业的考虑》中所说的：“如果我们选择了最能为人类福利而劳动的职业，那么，重担就不能把我们压倒，因为这是为大家而献身；那时我们所感到的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将默默地、但是永恒发挥作用地存在下去，面对我们的骨灰，高尚的人们将洒下热泪。”而我的理想，我想没有比这更好的解释了，那些默默无闻的推动了整个人类进程的人，那些为国家建设，民族振兴而付出努力的人，无论商人、政客、教师、医生，农民，工人，他们的生命是光辉的，他们为取得自己生命的意义而不懈努力，这里想到一句话，在《钢铁是怎样炼成的》一书中，奥斯特洛夫斯基说过：“人最宝贵的东西是生命,生命对于每个人都只有一次. 一个人的一生应该是这样度过的：当他回首往事的时候，他不会因为虚度年华而悔恨，也不会因为碌碌无为而羞耻；这样，在临死的时候，他就能够说：我的整个生命和全部精力，都已经献给世界上最壮丽的事业——为人类的解放而斗争。”这些影响着我个人的思想的，无论文字，语录还是那些对我言传身教的人，塑造了我的世界观、人生观和价值观，并将在我的一生中，持续下去。</p><h3 id="对剩余大学时光的一些规划"><a href="#对剩余大学时光的一些规划" class="headerlink" title="对剩余大学时光的一些规划"></a>对剩余大学时光的一些规划</h3><p>人生的道路上需要不断的思考，反省，但如何思考，如何反省这是一个问题。人除了需要物质生活之外，还需要精神食量，而最好的精神食量，就是那些好书，那些给予人以改变，让人看清物质本原，指导人前进的有思想的书；那些给予我们解决现实生活中各种问题的，告诉我们物质变化逻辑的技术书；那些告诉我们生活色彩，讲述现实的故事书，那些叙述史实，总结前人故事的历史书等等。这些书让我们有自己独立的灵魂，能够看到自己存在的意义，知道世界变化的客观规律，并告诉我们什么是善，什么是恶。<br>所以，对于大学剩下的时光，第一要求就是读书，无论能不能读懂，都需要把那些公认的好书，读一遍再走，不然浪费了大学的名头，也侮辱了大学生这个词。后续的读书计划及读书心得将在后面的博文里出现。</p><p>“人应该有一技之长”，这是诺顿对安迪所说的话，而这是我生活中信奉的圣经，无论在那，无论干什么，人应该有一技之长，并且知根知底，所以，我把计算机技术当作我的那一技之长，我需要为之付出的努力，将变成人生中的积累，不断沉淀。那要怎么将它变成一技之长呢，唯有合理的学习和提升安排才能做到。</p><p>提升自己的外语水平，这一点和前面的对应，对于我来说，英语的重要性不言而喻，我必须学好英语，否则就是空谈，不踩在巨人的肩膀上，看到的永远是无尽的山峦险岳，而巨人用英语。</p><p>时间易逝难追，对于我这样一出生就没有拿到一手好牌的人，只能打好手中的烂牌。上天对我们唯一的公平就是时间。时间如此宝贵，那人生不能走一步算一步，及早的规划人生是重要的，我想我以后的生活可能会艰难的多，但只要用心了，认真的考虑之后就没有问题。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>“心怀希望是一件好事，也许是最好的事，心怀希望，就永远有希望”。</p>]]></content>
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
